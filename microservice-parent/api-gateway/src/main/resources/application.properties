spring.application.name=api-gateway

server.port=8181
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#logging
logging.level.root=INFO
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO

##Product-service
#spring.cloud.gateway.routes=\
#    id: product-service,\
#    uri: lb://product-service,\
#    predicates:\
#      - Path=/products/**,\
#    filters:\
#      - StripPrefix=1

spring.cloud.gateway.routes[0].id=product-service
#lb -> load balancer
spring.cloud.gateway.routes[0].uri=lb://product-service
# predicate defines the condition when the routing, here all routing is based on Path /api/product
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product/**


##Order-service
#spring.cloud.gateway.routes=\
#    id: order-service,\
#    uri: lb://order-service,\
#    predicates:\
#      - Path=/orders/**,\
#    filters:\
#      - StripPrefix=1
#

spring.cloud.gateway.routes[1].id=order-service
#lb -> load balancer
spring.cloud.gateway.routes[1].uri=lb://order-service
# predicate defines the condition when the routing, here all routing is based on Path /api/order
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order


#Discovery-service
spring.cloud.gateway.routes[2].id=discovery-service
spring.cloud.gateway.routes[2].uri=http://localhost:8761
# predicate defines the condition when the routing, here all routing is based on Path /api/customer
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
#setPath = sets the path of the request before it is routed
spring.cloud.gateway.routes[2].filters[0]=SetPath=/


#Discovery-service static route
spring.cloud.gateway.routes[3].id=discovery-service-static
spring.cloud.gateway.routes[3].uri=http://localhost:8761
# predicate defines the condition when the routing, here all routing is based on Path /api/customer
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/auth/realms/spring-boot-microservices-realm

#Zipkin
#is used to configure the endpoint where the trace are sent to
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0
logging.pattern.level= %5p [${spring.application.name:}, %X{traceId:-},%X{spanId:-}]